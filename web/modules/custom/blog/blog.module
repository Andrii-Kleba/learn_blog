<?php

//use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
//use Drupal\node\Entity\NodeType;
//use Drupal\node\NodeInterface;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\imagemagick\ImagemagickExecArguments;

/**
 * @file
 * Main file for custom hooks and functions.
 */

/**
 * Implements hook_theme().
 */
function blog_theme($existing, $type, $theme, $path) {
  return [
    'blog_previous_next' => [
      'variables' => [
        'entity' => NULL,
      ],
      'file' => 'blog.theme.inc',
      'pattern' => 'blog_previous_next__',
    ],
    'blog_social_share' => [
      'variables' => [
        'url' => NULL,
        'label' => NULL,
      ],
      'file' => 'blog.theme.inc',
    ],
    'blog_label_with_icon_and_file' => [
      'variables' => [
        'url' => NULL,
        'label' => NULL,
        'filesize' => NULL,
        'media_type' => NULL,
        'mime_type' => NULL,
      ],
      'file' => 'blog.theme.inc',
    ],
  ];
}

///**
// * Implements hook_entity_extra_field_info().
// */
//function blog_entity_extra_field_info(): array {
//  $extra = [];
//
//  foreach (NodeType::loadMultiple() as $bundle) {
//    $extra['node'][$bundle->id()]['display']['previous_next'] = [
//      'label' => t('Button to previous and next entity'),
//      'weight' => 100,
//      'visible' => FALSE,
//    ];
//  }
//
//  return $extra;
//}
//
///**
// * Implements hook_ENTITY_TYPE_view().
// */
//function blog_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display) {
//  if ($display->getComponent('previous_next')) {
//    $build['previous_next'] = [
//      '#theme' => 'blog_previous_next',
//      '#entity' => $node,
//    ];
//  }
//}

/**
 * Implements hook_imagemagick_arguments_alter().
 */
function blog_imagemagick_arguments_alter(ImagemagickExecArguments $arguments, $command) {
  $arguments->add('-sampling-factor 4:2:0')
    ->add('-interlace Plane')
    ->add('-strip');
}

/**
 * Implements hook_query_TAG_alter() for entity_query_random.
 */
function blog_query_entity_query_random_alter(AlterableInterface $query) {
  $query->orderRandom();
}
