<?php

/**
 * @file
 * Primary module hooks for Blog - Blog article module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_extra_field_info().
 */
function blog_article_entity_extra_field_info(): array {
  $extra = [];

  $extra['node']['blog_entry']['display']['estimated_read_time'] = [
    'label' => t('Estimated read time'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['blog_entry']['display']['previous_next_blog_entry'] = [
    'label' => t('Button to previous and next blog entry'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function blog_article_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  $bem_block = Html::getClass('node-' . $node->bundle() . ($view_mode == 'default' ?: '-' . $view_mode));

  if ($display->getComponent('estimated_read_time')) {
    $node_paragraphs = $node->get('field_contain')->referencedEntities();
    $estimated_read_time = _blog_article_estimated_read_time($node_paragraphs);

    $build['estimated_read_time'] = [
      '#type' => 'inline_template',
      '#template' => '<div class="{{ bem_block }}__estimated_read_time">{{ estimated_read_time }} min.</div>',
      '#context' => [
        'bem_block' => $bem_block,
        'estimated_read_time' => $estimated_read_time,
      ],
    ];
  }

  if ($display->getComponent('previous_next_blog_entry')) {
    $build['previous_next_blog_entry'] = [
      '#theme' => 'blog_previous_next__blog_entry',
      '#entity' => $node,
    ];
  }
}

/**
 * Calculates estimated read time for article.
 *
 * @param \Drupal\paragraphs\ParagraphInterface[] $paragraphs
 */
function _blog_article_estimated_read_time(array $paragraphs): float {
  $word_per_minute = 143;
  $estimated_read_time = 0;

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  foreach ($paragraphs as $paragraph) {
    switch ($paragraph->bundle()) {
      case 'text':
        $word_count = str_word_count(strip_tags($paragraph->get('field_contains')->value));
        $estimated_read_time += floor(($word_count / $word_per_minute) * 60);
        break;

      case 'gallery':
      case 'image':
        $estimated_read_time += 10;
        break;

      case 'code':
        $word_count = str_word_count(strip_tags($paragraph->get('field_contains')->value));
        $estimated_read_time += floor(($word_count / $word_per_minute / 3) * 60);
        break;
    }
  }

  return ceil($estimated_read_time / 60);
}
